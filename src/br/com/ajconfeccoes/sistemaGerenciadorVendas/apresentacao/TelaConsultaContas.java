/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao;

import br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao.classesUtil.CursorUtil;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao.classesUtil.MensagemTela;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao.excessoes.ArgumentInvalidExeception;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao.excessoes.CaixaAbertoException;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.apresentacao.excessoes.CampoVazioException;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.dados.LiquidacaoDAO;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.entidade.Cliente;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.entidade.Conta;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.entidade.Liquidacao;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.entidade.Produto;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.entidade.Usuario;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.negocio.ContaBO;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.negocio.LiquidacaoBO;
import br.com.ajconfeccoes.sistemaGerenciadorVendas.negocio.UsuarioBO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author arley
 */
public class TelaConsultaContas extends Tela {

    List<Conta> contasTodas = null;
    List<Conta> contasExibidasNaTela = null;
    TelaPrincipal telaPrincipal = null;
    Cliente cliente = null;

    public TelaConsultaContas(TelaPrincipal telaPrincipal) {
        initComponents();
        this.contasTodas = new ArrayList<>();
        this.telaPrincipal = telaPrincipal;
        this.buscarTodos();
        rdoTodos.setSelected(true);
        desativaComponentesCliente();
    }

    private void desativaComponentesCliente() {

        lblNomeCliente.setVisible(false);
        lblClienteAtivo.setVisible(false);
        lblCPF.setVisible(false);
        txtCpf.setVisible(false);
        btnConsultarCliente.setVisible(false);

    }

    private void ativaComponentesCliente() {
        pnlContas.setVisible(true);
        lblNomeCliente.setVisible(true);
        lblClienteAtivo.setVisible(true);
        lblCPF.setVisible(true);
        txtCpf.setVisible(true);
        btnConsultarCliente.setVisible(true);
    }

    private void limparDadosClienteTela() {
        txtCpf.setText("");
        lblClienteAtivo.setText("");
    }

    private String lerCpfCliente() {
        String cpf = txtCpf.getText().trim();

        String mensagem = "";

        if (cpf.length() < 11) {
            mensagem = "CPF invÃ¡lido.";
        }

        if (!(mensagem == "" || mensagem == null)) {
            throw new CampoVazioException(mensagem);
        }

        return cpf;
    }

    private void setNomeClienteTela() {
        lblNomeCliente.setVisible(true);
        lblClienteAtivo.setText(cliente.getNome());
        lblClienteAtivo.setVisible(true);
    }

    public void carregarDadosTabela(List<Conta> contas) {
        this.contasExibidasNaTela = contas;
        Model model = new Model(contas);
        this.tblContas.setModel(model);
    }

    public void buscarTodos() {
        try {
            this.setCursor(CursorUtil.getCursor(3));
            ContaBO contaBO = new ContaBO();
            contasTodas = contaBO.buscarTodos();
            this.carregarDadosTabela(contasTodas);
        } catch (SQLException ex) {
            MensagemTela.exibirMensagemErro(this, "Erro desconhecido. Contate com o adminstrador", "Consultar contas");
        } finally {
            this.setCursor(CursorUtil.getCursor(0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotoes = new javax.swing.ButtonGroup();
        lblContas = new javax.swing.JLabel();
        pnlFiltro = new javax.swing.JPanel();
        lblProcurarPor = new javax.swing.JLabel();
        cmbFiltro = new javax.swing.JComboBox();
        btnOk = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        rdoTodos = new javax.swing.JRadioButton();
        rdoLiquidadas = new javax.swing.JRadioButton();
        rdoAbertas = new javax.swing.JRadioButton();
        lblCPF = new javax.swing.JLabel();
        txtCpf = new javax.swing.JFormattedTextField();
        btnConsultarCliente = new javax.swing.JButton();
        lblNomeCliente = new javax.swing.JLabel();
        lblClienteAtivo = new javax.swing.JLabel();
        btnLiquidar = new javax.swing.JButton();
        pnlContas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblContas = new javax.swing.JTable();

        setTitle("Consulta Contas");

        lblContas.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblContas.setForeground(new java.awt.Color(1, 1, 1));
        lblContas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ajconfeccoes/sistemaGerenciadorVendas/apresentacao/imagens/contas16x16.png"))); // NOI18N
        lblContas.setText("Contas");
        lblContas.setOpaque(true);

        pnlFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro de Contas"));

        lblProcurarPor.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblProcurarPor.setText("Procurar por:");

        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Cliente" }));
        cmbFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFiltroItemStateChanged(evt);
            }
        });

        btnOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ajconfeccoes/sistemaGerenciadorVendas/apresentacao/imagens/arrow_refresh.png"))); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblStatus.setText("Status:");

        grupoBotoes.add(rdoTodos);
        rdoTodos.setText("Todos");

        grupoBotoes.add(rdoLiquidadas);
        rdoLiquidadas.setText("Liquidadas");

        grupoBotoes.add(rdoAbertas);
        rdoAbertas.setText("Abertas");

        lblCPF.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblCPF.setText("CPF (*):");

        try {
            txtCpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnConsultarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ajconfeccoes/sistemaGerenciadorVendas/apresentacao/imagens/zoom.png"))); // NOI18N
        btnConsultarCliente.setText("Consultar");
        btnConsultarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarClienteActionPerformed(evt);
            }
        });

        lblNomeCliente.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblNomeCliente.setText("Nome: ");

        lblClienteAtivo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        lblClienteAtivo.setForeground(new java.awt.Color(72, 131, 228));

        javax.swing.GroupLayout pnlFiltroLayout = new javax.swing.GroupLayout(pnlFiltro);
        pnlFiltro.setLayout(pnlFiltroLayout);
        pnlFiltroLayout.setHorizontalGroup(
            pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addComponent(lblProcurarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoTodos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdoLiquidadas, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoAbertas)
                        .addGap(18, 18, 18)
                        .addComponent(btnOk))
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addComponent(lblCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConsultarCliente))
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addComponent(lblNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblClienteAtivo, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        pnlFiltroLayout.setVerticalGroup(
            pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFiltroLayout.createSequentialGroup()
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rdoTodos)
                            .addComponent(rdoLiquidadas)
                            .addComponent(rdoAbertas))
                        .addGap(23, 23, 23))
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblProcurarPor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnOk))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnConsultarCliente)
                        .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(pnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClienteAtivo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFiltroLayout.createSequentialGroup()
                        .addComponent(lblNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        btnLiquidar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ajconfeccoes/sistemaGerenciadorVendas/apresentacao/imagens/money.png"))); // NOI18N
        btnLiquidar.setText("Liquidar");
        btnLiquidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLiquidarActionPerformed(evt);
            }
        });

        pnlContas.setBorder(javax.swing.BorderFactory.createTitledBorder("Contas"));

        tblContas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblContas);

        javax.swing.GroupLayout pnlContasLayout = new javax.swing.GroupLayout(pnlContas);
        pnlContas.setLayout(pnlContasLayout);
        pnlContasLayout.setHorizontalGroup(
            pnlContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlContasLayout.setVerticalGroup(
            pnlContasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblContas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFiltro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLiquidar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlContas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblContas, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnLiquidar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLiquidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLiquidarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = this.tblContas.getSelectedRow();
        if (linhaSelecionada != -1) {
            Conta conta = this.contasExibidasNaTela.get(linhaSelecionada);

            int resposta;
            String mensagem = "Deseja liquidar esta conta de cÃ³digo" + conta.getCodigo() + " ?";
            String titulo = "Liquidar conta";
            resposta = JOptionPane.showConfirmDialog(null, mensagem, titulo, JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                try {
                    this.setCursor(CursorUtil.getCursor(3));
                    LiquidacaoBO liquidacaoBO = new LiquidacaoBO();
                    liquidacaoBO.criar(conta);
                    this.buscarTodos();
                    MensagemTela.exibirMensagemSucesso(this, "Conta liquidada com sucesso!", "Liquidar conta");
                } catch(ArgumentInvalidExeception aie){
                    MensagemTela.exibirMensagemInformacao(this, aie.getMessage(), "Liquidar conta");
                } catch (CaixaAbertoException cae) {
                        
                    MensagemTela.exibirMensagemErro(this, cae.getMessage(), "Liquidar conta");
                } catch (SQLException ex) {
                    MensagemTela.exibirMensagemErro(this, "Erro desconhecido. Contate com o adminstrador.", "Liquidar conta");
                } finally{
                    this.setCursor(CursorUtil.getCursor(0));
                }
            }

        } else {
            String mensagem = "Nenhum conta selecionada.";
            JOptionPane.showMessageDialog(this, mensagem, "Liquidar conta", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnLiquidarActionPerformed

    private void btnConsultarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarClienteActionPerformed
        // TODO add your handling code here:
        try {
            this.setCursor(CursorUtil.getCursor(0));
            this.cliente = buscarClienteNasContasByCpf(lerCpfCliente());
            if (cliente != null) {
                setNomeClienteTela();
            } else {
                limparDadosClienteTela();
                MensagemTela.exibirMensagemInformacao(this, "Cliente nÃ£o encontrado nas contas", "Consultar cliente");
            }
        } catch (CampoVazioException cve) {
            MensagemTela.exibirMensagemErro(this, cve.getMessage(), "Consultar cliente");
        }
    }//GEN-LAST:event_btnConsultarClienteActionPerformed

    public Cliente buscarClienteNasContasByCpf(String cpf) {
        Cliente cliente = null;
        for (Conta conta : contasTodas) {
            if (cpf.equals(conta.getOperacaoVenda().getCliente().getCpf())) {
                cliente = conta.getOperacaoVenda().getCliente();
                break;
            }
        }
        return cliente;
    }

    public List<Conta> buscarContasClienteByCpf(String cpf) {
        List<Conta> contasCliente = new ArrayList<>();
        for (Conta conta : contasTodas) {
            if (cpf.equals(conta.getOperacaoVenda().getCliente().getCpf())) {
                //cliente = conta.getOperacaoVenda().getCliente();
                contasCliente.add(conta);
            }
        }
        return contasCliente;
    }
    private void cmbFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFiltroItemStateChanged
        // TODO add your handling code here:
        if (cmbFiltro.getSelectedIndex() == 1) {
            ativaComponentesCliente();
        } else {
            desativaComponentesCliente();
            cliente = null;
            limparDadosClienteTela();
        }
    }//GEN-LAST:event_cmbFiltroItemStateChanged

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        // TODO add your handling code here:
        List<Conta> contasEncontrada = null;
        this.setCursor(CursorUtil.getCursor(3));
        if (cmbFiltro.getSelectedIndex() == 1) {
            if (cliente != null) {
                contasEncontrada = buscarContasClienteByCpf(cliente.getCpf());
            } else {
                MensagemTela.exibirMensagemInformacao(this, "Nenhum cliente cliente selecionado", "Consultar contas");
            }

        } else {
            contasEncontrada = contasTodas;
        }
        if (contasEncontrada != null && contasEncontrada.size() > 0) {
            List<Conta> contasFitradas = new ArrayList<>();

            if (rdoLiquidadas.isSelected()) {
                for (Conta ContasEncontrada1 : contasEncontrada) {
                    if (!ContasEncontrada1.isStatus()) {
                        contasFitradas.add(ContasEncontrada1);
                    }
                }

            } else if (rdoAbertas.isSelected()) {
                for (Conta ContasEncontrada1 : contasEncontrada) {
                    if (ContasEncontrada1.isStatus()) {
                        contasFitradas.add(ContasEncontrada1);
                    }
                }
            } else {
                contasFitradas = contasEncontrada;
            }
            carregarDadosTabela(contasFitradas);
        } else {
            if (cliente != null) {
                MensagemTela.exibirMensagemErro(this, "Nenhuma conta foi encontrada", "Consultar contas");
            }
        }
        this.setCursor(CursorUtil.getCursor(0));
    }//GEN-LAST:event_btnOkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsultarCliente;
    private javax.swing.JButton btnLiquidar;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox cmbFiltro;
    private javax.swing.ButtonGroup grupoBotoes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblClienteAtivo;
    private javax.swing.JLabel lblContas;
    private javax.swing.JLabel lblNomeCliente;
    private javax.swing.JLabel lblProcurarPor;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlContas;
    private javax.swing.JPanel pnlFiltro;
    private javax.swing.JRadioButton rdoAbertas;
    private javax.swing.JRadioButton rdoLiquidadas;
    private javax.swing.JRadioButton rdoTodos;
    private javax.swing.JTable tblContas;
    private javax.swing.JFormattedTextField txtCpf;
    // End of variables declaration//GEN-END:variables

    public class Model extends AbstractTableModel {

        List<Conta> contasT = null;

        public Model(List<Conta> contas) {
            this.contasT = contas;
        }

        @Override
        public int getRowCount() {
            return contasT.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Object getValueAt(int linha, int coluna) {
            Conta c = contasT.get(linha);
            if (coluna == 0) {
                return c.getCodigo();
            } else if (coluna == 1) {
                return c.getOperacaoVenda().getCliente().getNome();
            } else if (coluna == 2) {
                return c.getDataFormatada();
            } else if (coluna == 3) {
                if (c.isStatus()) {
                    return "Aberto";
                } else {
                    return "Liquidada";
                }
            } else {
                DecimalFormat formatador = new DecimalFormat("#,##0.00");
                return formatador.format(c.getValorTotal());
            }

        }

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "CÃ³digo";
            } else if (coluna == 1) {
                return "Cliente";
            } else if (coluna == 2) {
                return "Data";
            } else if (coluna == 3) {
                return "Staus";
            } else {
                return "Valor";
            }
        }

    }

}
